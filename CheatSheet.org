#+TITLE: OCaml Cheat Sheet
# SUBTITLE: Getting Started Reference Sheet
#+MACRO: URL https://github.com/alhassy/OCamlCheatSheet
#+MACRO: ShowURL @@latex:{\tiny\hspace{6em}\url{ {{{URL}}} } }@@
#+AUTHOR: [[http://www.cas.mcmaster.ca/~alhassm/][Musa Al-hassy]] {{{ShowURL}}}
#+EMAIL: alhassy@gmail.com
#+TODO: TODO | spacing
#+OPTIONS: d:nil

# The OCaml toplevel, version 4.07.1

* LaTeX Setup                                                :ignore:
# Can be obtained from: https://github.com/alhassy/MyUnicodeSymbols
#
#+LATEX_HEADER: \usepackage{/Users/musa/MyUnicodeSymbols/MyUnicodeSymbols}

# Removing the red box that appears in "minted" when using unicode.
# Src: https://tex.stackexchange.com/questions/343494/minted-red-box-around-greek-characters
#
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \AtBeginEnvironment{minted}{\dontdofcolorbox}
#+LATEX_HEADER: \def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}}
#+LATEX_HEADER: \makeatother


#+LATEX_HEADER: \usepackage{newunicodechar}
#+LATEX_HEADER: \newunicodechar{⟪}{\ensuremath{\llangle}}
#+LATEX_HEADER: \newunicodechar{⟫}{\ensuremath{\rrangle}}

#+INCLUDE: CheatSheet/CheatSheetSetup.org

* Administrivia :ignore:

#+latex: \vspace{1em}

OCaml is a strict language;
it is strongly typed where types are inferred.

I may write explicit type annotations below for demonstration
or clarity purposes.
  #+BEGIN_SRC ocaml
  (* Using explicit type annotations *)
  let x : int = 3;;
  let f (x : int) (y : string) (r : 'a) : float = 3.14;;
#+END_SRC

#+RESULTS:
: <fun>

Only when interacting with the top-level interpreter,
commands must be terminated by ~;;~.
OCaml uses ~;~ as an expression /separator/ ---not a terminator!

My Emacs setup for OCaml can be found on this [[https://github.com/alhassy/OCamlCheatSheet][CheatSheet's repo]].
* COMMENT more Administrivia

+ Command line interpreter, REPL, begun with ~ocaml~ and exited with ~exit 0;;~
  - All expressions in REPL must be terminated with ~;;~, not so in a script.
  - To load a source file enter ~#use "myfile.ml;;"~.

+ Only multi-line, nestable, comments: ~(* ... *)~.

+ All declarations are preceded by ~let~ or ~let rec~ for recursive ones.

+ Anonymous functions use the syntax: ~fun x₀ … xₙ -> ...~
  - ~function~ in-place of ~fun~ also works.
  - Infix functions can be used in prefix by enclosing them in parens; e.g., ~(+) 1 2.~

* Emacs Setup
First, let's get [Meta]OCaml.
#+BEGIN_SRC emacs-lisp
;; Easiest on my machine.
;; (async-shell-command "brew install ocaml")

;; The OCaml package manager: https://opam.ocaml.org/
(async-shell-command "brew install opam") ;; version 2.0.4

;; (async-shell-command "opam switch create 4.07.1")  ;; install ocaml
(async-shell-command "opam switch create 4.07.1+BER") ;; install metaocaml
#+END_SRC

Let's set this up for Emacs.
#+BEGIN_SRC emacs-lisp
(use-package tuareg :demand t)              ;; Emacs’ OCaml mode
(setq tuareg-support-metaocaml t)           ;; Only handles metaocaml syntax
(setq org-babel-ocaml-command "metaocaml")  ;; Different command for metaocaml
#+END_SRC

Let's obtain ~ocp-indent~ ---OCaml's indentation tool that indents the same even if
co-workers use a different editor--- and [[https://github.com/ocaml/merlin/wiki/emacs-from-scratch][merlin]] which provides interactive feedback
including context-aware completion and jumping to definitions.
#+BEGIN_SRC emacs-lisp
(async-shell-command "time opam install ocp-indent merlin") ;; real 1m33.636s
(use-package merlin)
(add-hook 'tuareg-mode-hook #'merlin-mode)
(with-eval-after-load 'merlin (setq merlin-command 'opam))
#+END_SRC
Now entering, say, ~List.~ brings a pop-up completion menu for the
contents of the list module.
#+latex: \texttt{List.}\null{}
#+latex: \hfill
---In org-src blocks, you need to enter the ocaml mode, via ~C-c '~.
# Or simple “M-x merline-mode” to use it /anywhere/, since it's a minor mode. :smile:
# The latter is not ideal since it can radically slow down literate writing.

:More:
+ C-c C-t :: Obtain type of OCaml identifier.

#+BEGIN_SRC ocaml
type nin = int;;
let x : nin = 1;;

x
#+END_SRC

#+RESULTS:
: 1

On ~x~, one ~C-c C-t~ yields ~nin~, further invocations improve verbosity by expanding
aliases to obtain ~int~.

+ Use ~merlin-type-expr~ to obtain the type of a given expression.
+ Use ~C-c C-l~ to jump to definition; ~merlin-locate~.

See here for more: https://github.com/ocaml/merlin/wiki/emacs-from-scratch
:End:

:Base_stuff_not_working:
#+BEGIN_SRC emacs-lisp :tangle no
;; Feature-rich full replacement to OCaml's standard library
(async-shell-command "time opam install base stdio")
;; This may appear to ‘hang’, but that's because it took me 13 minutes.
#+END_SRC

Ensuring libraries are loaded in toplevel ocaml sessions; the following is my
~~/.ocamlinit~.
#+BEGIN_SRC ocaml :tangle (when nil "~/.ocamlinit")
(* Added by OPAM. *)
  try Topdirs.dir_directory (Sys.getenv "OCAML_TOPLEVEL_PATH")
  with Not_found -> ();;

#use "topfind";;
#thread;;
#require "base";;
open Base;;
#+END_SRC
#require "core.top";;
#require "core.syntax";;

#+BEGIN_SRC ocaml
  let ratio1 x y = let open Float.O in of_int x / of_int y;;
#+END_SRC
:End:

* Arithmetic
  Operations on floats have a ‘.’ suffix.
  #+BEGIN_SRC ocaml
  8 / 3;;      (* 2 *)
  8 /. 3;;     (* Type error: /. is for floats *)
  8.0 /. 3.0;; (* 2.6666… *)
#+END_SRC

* Functions & Variables
A function is declared with the ~let~ keyword
---variables are functions of zero arguments.

\room
Function & varaible names /must/ begin with a lowercase letter, and may use _ or ~'~.
+ They cannot begin with capital letters or numbers, or contain dashes!
+ Functions are like variables, but with arguments, so the same syntax applies.

#
#+begin_parallel org
#+BEGIN_SRC ocaml
(* A curried function *)
let f x y = x + y

(* Function application *)
let result = f 10 (2 * 6)

(* Partial application *)
let g x = f x 2
#+END_SRC

#+latex: \columnbreak

#+BEGIN_SRC ocaml
(* We can re-bind variables *)
let x = 123
let x = string_of_int x
#+END_SRC

Recursive functions are marked with the ~rec~ keyword.
#+BEGIN_SRC ocaml
let rec fact n = if n = 0
		 then 1
		 else n * fact (n - 1)
#+END_SRC

#+end_parallel

 Here's an example of a higher-order function & multiple local functions
 & an infix operator & an anonymous function & the main method is
 parametricly polymorphic.
#+BEGIN_SRC ocaml
let try_add (bop : 'a -> 'a -> 'a) (test : 'a -> bool)
	    (default : 'a) (x : 'a) (y : 'a)
   = let (/@/) x y = bop x y
     (* Only select symbols can be used as infix operators *)
     (* (/@/) x y  =  x /@/ y *)
     and wrap a = if test a then a else default
     in wrap x /@/ wrap y;;

  699 = try_add (+) (fun a -> a mod 3 = 0) (666) (~-1) 33;;
  (* The anonymouse function uses ‘=’ as Boolean equality. *)

  ~- 2 = ~- 2 mod 3;; (* /Remainder/ after dividing out 3s *)
#+END_SRC

* Booleans
 Inequality is expressed with ~<>~.
#+BEGIN_SRC ocaml
(* false, true, false, true, false, true, true, 1 *)
true = false , true || false, true && false, true >= false
, 12 < 2, "abc" <= "abd", 1 <> 2
, if true then 1 else 2
#+END_SRC

* Strings

OCaml strings are not arrays, or lists, of characters as in C or Haskell.
#+BEGIN_SRC ocaml
"string catenation" = "string " ^ "catenation"

Printf.printf "%d %s" 1972 "taxi";;
let input = read_line ();;
#+END_SRC

:More:
+ Double quotes for strings, single quote for characters,
  and a single quote may be used as part of an identifier.
  - String catenation with ~(^).~
  - Not arrays, or lists, of characters as in C or Haskell.
  - Expected ~Print.printf string args~.
  - Also ~print_string~ and ~read_line ()~.
:End:

* Records
  Records: Products with named, rather than positional, components.
#+BEGIN_SRC ocaml
  type point2d = {x : float; y : float};;

  (* Construction *)
  let p = {y = 2.0; x = 3.4};;

  (* Pattern matching for deconstruction *)
  let {x = px; y = py} = p;;
  let go {x = qx; y = qy} = qx +. qy;;

  (* More tersely, using “field punning”: Variables must coincide with field names. *)
  let erroenous ({xx; y} : point2d )= x +. y;;
  let works {x; y} = 0.0;;

  (* Or we can use dot notation *)
  let go q = q.x +. q.y;;
#+END_SRC

* Variants and Pattern Matching
   Variant types: A unified way to combine different types into a single type;
   each case is distinuighed by a capitalised tag.

#+BEGIN_SRC ocaml
(* Constructors must start with a capital letter, like in Haskell *)
type 'a fancy_num =   Nothing | Boring of int | Fancy of 'a
		    | Point of point2d | Pair of 'a fancy_num * 'a fancy_num

let example = Pair (Fancy "twenty", Point {x = 1.2; y = 3.14})
#+END_SRC

The tags allow us to /extract/ components of a variant value
as well as to case against values by inspecting their tags.
This is /pattern matching/.

#+BEGIN_SRC ocaml
(* Destructuring a value *)
let Pair(head, _) = example;;

(* Guarded pattern matching, with in-line casing via ‘match’ *)
let rec sum acc = function
  | Nothing -> 0 + (match acc with true -> 1 | false -> 0)
  | Fancy x when x <= "nine" -> 0
  | (Fancy "twenty") as p -> failwith "Evil!"
  | Pair(l, r) -> sum acc l + sum acc r
  | _ -> 2 (* Default case *)

let res = sum true example (* Exception: Failure "Evil!" *)

(* Type aliases can also be formed this way *)
type myints = int
#+END_SRC

Note that we can give a pattern a name; above we mentioned ~p~,
but did not use it.

+ Repeated & non-exhaustive patterns trigger a warning; e.g., remove the default case above.

+ You can pattern match on arrays too; e.g.,
  ~[| x ; y ; z|] -> y~.

#+latex:  \room
The above mechanisms apply to all variants ---including tuples, lists, and options.

* COMMENT Type Construction
We can make an alias: ~type myInt = int~

However we can also make a new ADT and pattern match on it.

#+BEGIN_EXAMPLE
type 'a roseTree = Leaf of 'a | MkRoseTree of 'a roseTree list

let rec treeFilter p = function
  | MkRoseTree ts   -> MkRoseTree (List.map (treeFilter p) ts)
  | Leaf a when p a -> Leaf a
  | _               -> MkRoseTree []
#+END_EXAMPLE

  - As in Haskell, constructors must start with a capital letter
   *however* type names must begin with a lowercase letter.
  - We may omit the ~of ...~ to obtain nullary constructors, as expected.

  - Notice the optional guard ~when~ and the wildcard pattern ~_~.

Example usage:
#+BEGIN_EXAMPLE
let test = MkRoseTree [ Leaf 1 ; MkRoseTree [ Leaf 2; Leaf 3] ; MkRoseTree [Leaf 4] ]

let rec even = function
 | 0 -> true
 | 1 -> false
 | n -> even (n-2)

(*
# treeFilter even test;;
- : int roseTree =
MkRoseTree
 [MkRoseTree []; MkRoseTree [Leaf 2; MkRoseTree []]; MkRoseTree [Leaf 4]]
*)
#+END_EXAMPLE

* Tuples and Lists
  Tuples: Parentheses are optional, comma is the main operator.
#+BEGIN_SRC ocaml
  let mytuple  : int * string * float = (3, "three", 3.0);;

  (* Pattern matching & projection *)
  let (woah0, woah1, woah2) = mytuple;;
  let add_1and4 (w, x, y, z) = w + z;;
  let that = fst ("that", false)

  (* A singelton list of one tuple !!!!  *)
  let zs = [ 1, "two", true ]

  (* Lists:  type 'a list = [] | (::) of 'a * 'a list  *)
  let xs = [1; 2; 3]
  [1; 2; 3] = 1 :: 2 :: 3 :: [];; (* Syntactic sugar *)

  (* List catenation *)
  [1;2;4;6] = [1;2] @ [4;6];;

  (* Pattern matching example; Only works on lists of length 3 *)
  let go [x; y; z] = x + y + z;;
  14 = go [2;5;7];;

  (* Labelled arguments, using ‘~’, means position is irrelevant *)
  [1; 2; 3] = List.map ["a", "ab", "abc"] ~f:String.length;;
  [1; 2; 3] = List.map  ~f:String.length ["a", "ab", "abc"];;
#+END_SRC

:More:
Then,
| List.nth list index   |
| List.map func list    |
| List.filter func list |
| List.hd               |
| List.rev              |
| List.length           |
| String.length         |

+ Syntax: ~[x₀; ...; xₙ]~

  - Tuples are optionally enclosed in parens;
    hence ~[x₀, ..., xₙ]~ is a singleton list
    consisting of only one tuple!

+ Expected functionals:
    ~List.nth~ for list lookup,
    ~List.map~, ~List.filter~, etc.

+ Cons operation is denoted ~::~.

+ Arrays have syntax ~[|x₀; ...; xₙ|]~
   with 0-indexing lookup ~arr.(n)~.

:End:

* spacing newpage                                                    :ignore:
  \newpage

* Options
Option: Expressing whether a value is present or not.
#+BEGIN_SRC ocaml
  (* type 'a option = None | Some of 'a *)

  let divide x y : int option = if y = 0 then None else Some (x / y);;

  let getInt ox = match ox with None -> 0 | Some x -> x;;
  0 = getInt None;;
  2 = getInt (Some 2);;
#+END_SRC

* Imperative Programming ---Sequencing & ~main~

We may use begin/end or parentheses to group
expressions together.

#+begin_parallel org
#+BEGIN_SRC ocaml
(* Inline *)
let x = begin 1 * 2 end + (3 - 2);;

(* Parentheses *)
(  print_string "a"
 ; () (* This is the unit value *)
 ; 9
);;

(* Begin-end block *)
begin
  print_string "nice";
  "bye";
  true;
  10
end;;
#+END_SRC
#+end_parallel

Remember: Single semicolon ~;~ is for sequencing whereas double ~;;~ is for termination.

#+latex: \room
OCaml programs don't have a unique ~main~ function as in C, instead the entire file
is evaluated sequentially at startup, which may contain arbitrary expressions not just functional declarations,
and so in some sense the full codebase is one big ~main~ function.

* Imperative Programming ---Arrays
Zero-indexed Arrays: Indexing with ~.(i)~ and update with ~<-~.
#+BEGIN_SRC ocaml
let nums : int array = [| 1; 2; 3 |];;
nums.(0) <- 12;;

12 = nums.(0);;
[|12; 2; 3|] = nums;;
#+END_SRC

What is the /type/ of update, ~<-~? A function that returns the unit type!
---see ~myupdate~ below.

* Imperative Programming ---Unit Type

Operations whose use produces a side-effect return the ~unit~ type.
This’ akin to the role played by ~void~ in C.
A /function/ is a sequence of expressions; its /return value/
is the value of the final expression ---all other expressions
are of unit type.

#+begin_parallel org
#+BEGIN_SRC ocaml
(* type unit = () *)
let ex : unit = ();;

let myupdate (arr : 'a array) (e : 'a)
	     (i : int) : unit
  = arr.(i) <- e;;

myupdate nums 33 1;;
[|12; 33; 3|] = nums;;
#+END_SRC
#+latex: \columnbreak
#+BEGIN_SRC ocaml
let my_io () = print_endline "Hello!" ;;

let const x y
  = my_io();
    y;
    x;;

let res = const 1972 12;;
#+END_SRC
#+end_parallel

* Imperative programming ---Mutable records
Record fields are immutable by default, but can be declared mutable.
#+BEGIN_SRC ocaml
type running_sum = {mutable sum : int; mutable more : int};;

let create () = {sum = 0; more = 0};;

let update rs x =   rs.sum  <- rs.sum + rs.more
		  ; rs.more <- x;;

let  res = create ()
in   update res 12
   ; {sum = 0; more = 12} = res ;;
#+END_SRC

* Imperative Programming ---References
References: Single mutable values; i.e., a record with a single mutable field named ~contents~.
#+BEGIN_SRC ocaml
let x : int ref = {contents = 0}
in x.contents <- x.contents + 1; {contents = 1} = x;;
#+END_SRC

Refs come with a handful of convenience methods; here's their re-implementation:
#+BEGIN_SRC ocaml
(* Alias    *) type 'a ref  = {mutable contents : 'a};;
(* Creation *) let ref v    = {contents = v};;
(* Access   *) let (!) r    = r.contents;; (* “value of” *)
(* Update   *) let (:=) r e = r.contents <- e;;
#+END_SRC
Notice that ~ref~ is overloaded: As a type former and as a function forming values.
#+BEGIN_SRC ocaml
(* Summing the first 10 numbers *)
let  sum = ref 0
in   for i = 0 to 10 do sum := !sum + i done
   ; 55 = !sum;;
#+END_SRC

#+RESULTS:
: true

* COMMENT Imperative Programming ---Loops

At each iteration, cons the counter ~i~ to
the value of the list /so far/:
#+BEGIN_SRC ocaml
(* Using “i = 1 to 10” yields the reverse  *)
let xl = ref [] in
for i = 10 downto 1 do
xl := i :: !xl;
done;
!xl
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |

#+BEGIN_SRC ocaml
let n = 100 and i = ref 0 and x = ref 0 in
while n <> !i do
  x := !x + !i; i := !i + 1;
done;
!x , 2 * !x = n * (n - 1)
#+END_SRC

#+RESULTS:
: (4950, true)

* spacing newpage                                                    :ignore:
  \newpage

* Modules

  OCaml files not only store & manage code, but also correspond to (second-class) ‘modules’,
  which act as boundaries that divide a program into conceptual units.

  + At its simplest, a module is a collection of definitions that are stored
    within a namespace.

  + Implementation details of a module can be hidden by using an
    /interface, module type, signature/ ---all are aliases.

    - ~val~ declarations specify values in a signature: ~val ⟪identifier⟫ : ⟪type⟫~.
    - A type is /abstract/ if its name is exposed in the interface but its definition is not: ~type t~.
      * It is conventional to use ~t~ for the name of such types.
    - Including the type definition in the interface makes the type /concrete/.

  + E.g., module names are derived, with capitalisation, automatically from file names.
    An interface for ~myfile.ml~ to constrain exposed interface is placed in ~myfile.mli~.

    This is nearly how C header and implementation files work.

  + Modules & signatures can be nested inside other modules.

Modules names always begin with a capital; their contents are accessed with
dot notation. Here is the general syntax:
#+BEGIN_SRC ocaml :tangle no
(* Module declaration *)
module ‘Name’ : ‘signature’ = struct ‘implementation’ end

(* Signature declaration *)
module type ‘Name’ = sig ‘sig_decls’ end

(* sig_decls are a space-separated sequence of “type” or “val : ‘name’ : ‘type’”
declarations. A “type” declaration with no “= ⋯” is an abstract type. *)
#+END_SRC

Without constructors ~type~ creates aliases, if we want to treat a type in two different
ways and have the compiler ensure we don't mess-up, we produce single-constructor new
types:
#
#+begin_parallel org
#+BEGIN_SRC ocaml
type person  = P of string;;
type address = A of string;;

let jasim : person  = P "jasim";;
let home  : address = A "the farm";;

(* Type error *)
let this : person = home;;

(* If needed, we could make coercions *)
let person_to_string : person -> string
 = function P s -> s

let address_of_string : string -> address
 = fun s -> A s
#+END_SRC
#+end_parallel

However, if the underlying type were the /same,/ this repetition could be error-prone.
Instead, we could use /generative modules/: Distinct types with the same underlying implementation.
Being ‘generative’ is akin to the ~new~ keyword in Java:
  Each use of the ~BasicImplementation~ module below makes a new type.

#
#+begin_parallel org
# (* We can have this on one line;
#   words “val, type” delimit constitutents. *)
#+BEGIN_SRC ocaml :session
module type EssentiallyString = sig
  type t
  val to_string : t -> string
  val from_string : string -> t
  val (=) : t -> t -> bool
  end

module BasicImplementaion
       : EssentiallyString = struct
  type t = string
  let to_string x = x
  let from_string x = x
  let (=) l r = String.(l = r)
end
#+END_SRC
#+end_parallel

Note that ~BasicImplemention~ is just a namespace where, e.g., ~t~ is an alias for ~string~.

#+BEGIN_SRC ocaml :session
(* Here we get to reuse the above, thereby avoiding repetition *)
module Person  : EssentiallyString = BasicImplementaion
module Address : EssentiallyString = BasicImplementaion

let jasim : Person.t  = Person.from_string "jasim";;
let home  : Address.t = Address.from_string "the farmlands";;

(* Type error: Expected a Person.t, but have a Address.t *)
let uhoh : Person.t = home;;
#+END_SRC

Note that we could have placed the definitions of ~EssentiallyString~
and \newline ~BasicImplementaion~ in-line for the ~Person~ and ~Address~ module
declarations ---without syntactic alterations--- but that would have
defeated our purpose of avoiding repetition.

#+latex: \room
Without the type annotation, we could accidentally forget to implement
part of the interface & OCaml would infer a different module type.
Use the ~module type of~ operator to see what was inferred.
# This operator computes a signature from a module.
#+BEGIN_SRC ocaml :session
module ErroneousImplementation = struct
  type t = string let (=) l r = String.(l = r)
end

module type S = (module type of ErroneousImplementation)
(* module type S = sig type t = string val ( = ) : 'a -> 'a -> bool end *)
#+END_SRC

#+latex: \hrule \room

Many /equivalent/ ways to use module contents ---the third is for small expressions.
+ Note the dot!
#+BEGIN_SRC ocaml :session
let qasim = Person.(from_string "jasim")
in   (let open Person in qasim = jasim)
   , Person.(=) qasim jasim
   , Person.(from_string "jasim" = jasim)
   (* Rebind module name to a shorter name *)
   , let module P = Person in P.(qasim = jasim)
;;
#+END_SRC

#+latex: \hrule \room

While opening a module [type] affects the environment used to search for identifiers,
/including/ a module is a way of adding new identifiers to a module [type] proper
---it is a copy-paste of constituents.
For example, we could re-organise ~EssentialyString~ into a hierarchy:
#+BEGIN_SRC ocaml
module type Type = sig type t end

module type Relation = sig include Type val (=) : t -> t -> bool end
(* module type Relation = sig type t val ( = ) : t -> t -> bool end *)

module type PingPong = sig
  include Type val from_string : string -> t val to_string : t -> string end
#+END_SRC

This allows us to form /extensions/ to modules, akin to C#:
To extend, say, the ~List~ module with a new function ~f~ so that
~List.f~ is valid, we make and open ~module List = struct let f = ⋯ include List~.
If we wanted to /override/ an existing ~f~, we put its definition after the include.

The interface would be ~sig val f : ⋯ include (module type of List) end~.

#+latex: \room \hrule \room

When we have multiple declarations of a type or we have type that is too abstract to be
of use, expect to see:
~Error: This expression has type 𝓉 but an expression was expected of type M.t~; instead maybe use ~M.t with type t = 𝓉~, where:
#+BEGIN_SRC ocaml :tangle no
(* “Constraint Sharing”: Declaration of t stays as an alias. *)
   sig type t val ⋯ end with type t = imp
≈  sig type t = imp val ⋯ end

(* “Destructive Substitution”: Declaration of t is gone. *)
   sig type t val ⋯t⋯ end with type t := imp
≈  sig val ⋯imp⋯ end
#+END_SRC
We may now continue our ~EssentiallyString~ hierarchy:
#+BEGIN_SRC ocaml
module type IntRelation = sig include Relation with type t := int end
(* Desugars: module type IntRelation = sig val ( = ) : int -> int -> bool end *)
module type EssentiallyStr = sig include Type include Relation with type t := t end
#+END_SRC

#+latex: \room \hrule \room

*Warning!*
The order of constructor declarations for a concrete type variant must be the
same in the implementation as in the interface, likewise for record fields and
function arguments.

* Functors

  Functors are, roughly speaking, functions from modules to modules.
  --- There's no “modules to module types” thing, [[https://stackoverflow.com/a/54783553/3550444][instead]] we return
  a module that contains a module type ;-) ---

  \room
  Functors provide the same abstraction features as functions do but also
  allow the implementation of one module to /vary/ depending on another module.
  In contrast to functions, functors require explicit type annotation
  ---otherwise how would we know what constituents the input module contains---
  and their arguments /must/ be enclosed in parentheses.

  In a sense, these are parameterised modules ---as in Agda--- and that is how
  they may be treated syntactically in OCaml:
  #+BEGIN_SRC ocaml
(* Example functor that takes a namespace having ‘x’
   and yields a namspace with ‘x’ incremented. *)

  module type OneInt = sig val x : int end;;
  module IncrementFunctor (M : OneInt) : OneInt = struct let x = M.x + 1 end;;

  module Three : OneInt = struct let x = 3 end;;
  module Four  : OneInt = IncrementFunctor(Three);;

  Four.x = Three.x + 1;;
#+END_SRC

  A functor may be applied to *any* module that satisfies the functor's input interface:
#+BEGIN_SRC ocaml
  module Point = struct let x = 0 let y = 1 end;;
  module One = IncrementFunctor(Point);;
  One.x = Point.x + 1;;
  #+END_SRC

* First-Class Modules

  Modules can contain types & values, but ordinary values can't contain modules or
  module types. In order to define variables whose value is a module, or a function
  that takes a module as an argument, OCaml provides /first-class modules/ which are
  ordinary values that can be created from and converted back to regular modules.

  # \room
  # Functors can thus be replaced by functions acting on first-class modules?/
  #

  A first-class module is created by packaging up a module with a signature that
  it satisfies by using the ~module~ keyword:
  #+BEGIN_SRC ocaml
 let three    : (module OneInt) = (module Three : OneInt);;
 let three'   = (module Three);; (* Error: Signature couldn't be inferred *)
 let three''  : (module OneInt) = (module Three);;
 let three''' = (module Three : OneInt);; (* Most terse ^_^ *)

 (* Lists are homogeneous, whence latters' type inferred from formers'  *)
 let list_of_modules = [three; (module Three); (module Four)];;
  #+END_SRC
# val list_of_modules : (module OneInt) list = [<module>; <module>; <module>]

  Dot notation only works for records and modules, so we access contents of a
  first-class module by turning it into an ordinary module with ~val~:
  #+BEGIN_SRC ocaml
  let x : int = let module M = (val three : OneInt) in M.x;;
  let x : int = (val three : OneInt).x;; (* Error: Invalid syntax. *)
  #+END_SRC

  *Warning!* The parentheses for these ~module, val~ keywords are important!

  Rule of thumb: Use the forms ~(module M : T)~ and ~(val M : T)~ always.

  We can create ordinary functions which consume and create first-class modules.
  #+BEGIN_SRC ocaml
  let unpack (m : (module OneInt)) : int = let module M = (val m) in M.x;;
  let pack (n : int) : (module OneInt) = (module struct let x = n end);;

  3 = unpack three;;
  3 = unpack (pack 3);;
  pack 3 = three;; (* Woah! Equality of modules! *)

  (* “Module pattern matching” *)
  (* unpack' : (module OneInt) -> int *)
  let unpack' (module M : OneInt) = M.x;;
  #+END_SRC

  #+RESULTS:
  : true

* spacing newpage                                                    :ignore:
  \newpage

* /Locally/ Abstract Types & ‘[un]bundling’

  Type variables are generally implicit, but we can treat them as abstract types
  in a function body yet still not pass them in explicitly at use-sites.
  #+BEGIN_SRC ocaml
  (* Where did the 'a come from? *)
  let wrap (x : 'a) : 'a list = [x];;

  (* Let's explicitly declare it! *)
  let wrap' (type a) (x : a) : a list = [x];;

  (* Usage doesn't change. *)
  wrap 1 = wrap' 1
  #+END_SRC

  One use is to connect the abstract types of a first-class module with other types
  we're working with ---by using constraint sharing.
  /That is, we ‘unbundle’ the type from ‘inside’ the module to its ‘type’./
  *This is a prime reason to use first-class modules!*

  #+latex: \room
  Here's an example where we approximate C#'s ~default~ keyword:
  #+BEGIN_SRC ocaml
  module type Pointed = sig type t val point : t end;;

  (* Error: The hidden type of M is exposed!
     “The type constructor M.t would escape its scope.”
     “here : (M:Pointed) → M.t” *)
  let default (module M : Pointed) = M.point;;

  (* default : (module Pointed with type t = 'a) -> 'a *)
  let default (type a) (module M : Pointed with type t = a) = M.point;;

  module Nat : Pointed with type t = int = struct type t = int let point = 0 end;;
  (* module Nat = struct type t = int let point = 0 end;; *)

  (* ‘default’ works on first-class modules *)
  0 = default(module Nat)
  #+END_SRC

  /Conversely, this allows us to ‘bundle’ up data to form a module!/
  #+BEGIN_SRC ocaml
  (* make_pointed : 'a -> (module Pointed with type t = 'a) *)
  let make_pointed (type a) (x : a) : (module Pointed with type t = a)
    = (module struct type t = a let point = x end)
  #+END_SRC

* spacing vfill :ignore:
  #+latex: \vfill

* Metaprogramming with [[http://okmij.org/ftp/ML/MetaOCaml.html][MetaOCaml]]

  Quasi-quote expressions with ‘brackets’ ~.< expr >.~
  /to delay their execution/
  and splice quoted items into such an expression with ‘escape’ ~.~expr.~
  Finally, code can be ‘run’ with ~Runcode.run expr~.

  #+latex: \room
  *Warning!* You must use the ~metaocaml~ command rather than the ~ocaml~ command.

  #+BEGIN_SRC ocaml
  open Runcode;;

  (* Addition is not performed right now, but transformed into ‘code’ *)
  let x : int code = .<1 + 2>.;; (* .<1 + 2>. *)

  (* Actually execute the addition *)
  let y : int = run x;;

  (* Example using escape *)
  let z : int code = .< let res = .~x in res + res >.;;
  6 = run z;;

  (* A more complicated example *)

  (* Desugars using a fresh name: .<fun x_4 -> 2 * x_4>. *)
  let ff = let c = 2 in .< fun x -> c * x >.;;
  let six = .< .~ff 3 >.;; (* .<(fun x_14 -> 2 * x_14) 3>. *)
  #+END_SRC

  The traditional ‘staging of the power function’ example
  can be found [[http://ocamllabs.io/iocamljs/staging.html][here]] ---as a Jupyter Notebook.

  #+latex: \room
  For more, see [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.438.6924&rep=rep1&type=pdf][A Gentle Introduction to Multi-stage Programming]]
  + The deprecated ~!.~ is replaced with ~Runcode.run~.
  + A Haskell rendition can be found [[https://github.com/alhassy/multistage-programming-taha][here]].

* spacing newpage                                                    :ignore:
  \newpage
* Reads

+ [X] [[https://learnxinyminutes.com/docs/ocaml/][Learn /x/ in /y/ minutes, where /x = OCaml/ ]]
+ [X] [[https://try.ocamlpro.com/][Try OCaml, online]]
+ [X] [[https://realworldocaml.org/][Real World OCaml]]
+ [ ] [[https://ocaml.org/learn/tutorials][OCaml meta tutorial]] ---including [[https://ocaml.org/learn/tutorials/99problems.html][99 Problems]]
+ [ ] [[http://ocaml.github.io/ocamlunix/?ref=hackr.io][Unix system programming in OCaml]]

* COMMENT Making README.md

C-c C-c: Evaluate src block.

#+NAME: make-readme
#+BEGIN_SRC elisp :results none
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: README.md
     #+HTML: <h1> OCamlCheatSheet </h1>
     #+OPTIONS: toc:nil d:nil
     # Toc is displayed below at a strategic position.

     Quick reference for the OCaml language.

     *The listing sheet, as PDF, can be found
     [here]({{{URL}}}/blob/master/CheatSheet.pdf)*,
     while below is an unruly html rendition.

     This reference sheet is built around the system
     https://github.com/alhassy/CheatSheet.

     #+TOC: headlines 2
     #+INCLUDE: CheatSheet.org
    ")
    (org-mode)
    (org-md-export-to-markdown)
)
#+END_SRC

* COMMENT footer

# Local Variables:
# eval: (org-babel-tangle)
# eval: (progn (org-babel-goto-named-src-block "make-readme") (org-babel-execute-src-block) (outline-hide-sublevels 1))
# compile-command: (org-latex-export-to-pdf)
# End:
